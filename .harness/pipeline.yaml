pipeline:
  name: Custom Delegate
  identifier: Custom_Delegate
  projectIdentifier: Azure
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: Konr_Github
        repoName: harness-custom-delegate
        build: <+input>
  stages:
    - stage:
        name: Build Delegate
        identifier: Build_Delegate
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.cidemo
              namespace: konr-se-sandbox
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - parallel:
                  - step:
                      type: Run
                      name: Fetch Latest Delegate Tag
                      identifier: Fetch_Latest_Delegate_Tag
                      spec:
                        connectorRef: konrness_Docker_Hub
                        image: dwdraju/alpine-curl-jq
                        shell: Sh
                        command: |-
                          # Testing
                          echo <+trigger.type>
                          echo <+pipeline.triggerType>
                          echo <+trigger.artifact.build>
                          echo <+pipeline.variables.override_image_tag>

                          if [ "<+trigger.type>" = "new_artifact"  ]
                          then
                            # Pipeline was triggered off of a new artifact tag, so use that tag
                            SELECTED_TAG="<+trigger.artifact.build>"
                          elif [ "<+pipeline.variables.override_image_tag>" != "" ]
                          then
                            # An override image tag was provided as run-time input
                            SELECTED_TAG="<+pipeline.variables.override_image_tag>"
                          else
                            # Pipeline was manually triggered, so fetch the latest delegate image from API

                            # get token to be able to talk to Docker Hub
                            TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${DOCKER_USERNAME}'", "password": "'${DOCKER_PASSWORD}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)

                            # get tags for repo
                            IMAGE_TAGS=$(curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${IMAGE_NAME}/tags/?page_size=100 | jq -r '.results|.[]|.name')

                            # build a list of images from tags
                            for j in ${IMAGE_TAGS}
                            do
                              # filter tag list to matching regex
                              if [[ "${j}" =~ $TAG_REGEX ]]; then
                                # add matching tag to list
                                TAG_LIST="${TAG_LIST} ${j}"
                              fi
                            done

                            # output list of all docker images
                            echo "All tags available:"
                            for i in ${TAG_LIST}
                            do
                              echo ${i}
                            done

                            echo "\Selected tag:"
                            SELECTED_TAG=$(echo ${TAG_LIST} | cut -d ' ' -f1)

                          fi

                          echo ${SELECTED_TAG}
                        envVariables:
                          IMAGE_NAME: harness/delegate
                          TAG_REGEX: "[0-9]{2}\\.[0-9]{2}\\.[0-9]+$"
                          DOCKER_USERNAME: <+pipeline.variables.docker_username>
                          DOCKER_PASSWORD: <+pipeline.variables.docker_password>
                        outputVariables:
                          - name: SELECTED_TAG
                      when:
                        stageStatus: Success
                      failureStrategies: []
                  - step:
                      type: Run
                      name: Fetch Latest Delegate Tag from API
                      identifier: Fetch_Latest_Delegate_Tag_from_API
                      spec:
                        connectorRef: konrness_Docker_Hub
                        image: dwdraju/alpine-curl-jq
                        shell: Sh
                        command: |-
                          if [ -z "<+trigger.artifact.build>" ]
                          then
                            # Pipeline was triggered off of a new artifact tag, so use that tag
                            SELECTED_TAG="<+trigger.artifact.build>"
                          else

                            # get supported delegates for Harness Account
                            IMAGE_TAGS=$(curl -s -H "x-api-key: ${API_KEY}" https://app.harness.io/gateway/api/version/supportedDelegate?accountId=${ACCOUNT_ID} | jq -r '.results|.[]|.name')

                            # TODO: Once this API is released update this JSON parsing to expose SELECTED_TAG env var

                            # build a list of images from tags
                            for j in ${IMAGE_TAGS}
                            do
                              # filter tag list to matching regex
                              if [[ "${j}" =~ $TAG_REGEX ]]; then
                                # add matching tag to list
                                TAG_LIST="${TAG_LIST} ${j}"
                              fi
                            done

                            # output list of all docker images
                            echo "All tags available:"
                            for i in ${TAG_LIST}
                            do
                              echo ${i}
                            done

                            echo "\Selected tag:"
                            SELECTED_TAG=$(echo ${TAG_LIST} | cut -d ' ' -f1)

                          fi

                          echo ${SELECTED_TAG}
                        envVariables:
                          ACCOUNT_ID: <+pipeline.variables.account_id>
                          API_KEY: <+pipeline.variables.harness_api_key>
                      when:
                        stageStatus: Success
                        condition: true==false
                      failureStrategies: []
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and Push
                  identifier: Build_and_Push
                  spec:
                    connectorRef: konrness_Docker_Hub
                    repo: konrness/harness-delegate-<+pipeline.variables.image_suffix>
                    tags:
                      - <+execution.steps.Fetch_Latest_Delegate_Tag.output.outputVariables.SELECTED_TAG>
                    dockerfile: Dockerfile-<+pipeline.variables.image_suffix>
                    buildArgs:
                      BASE_IMAGE_TAG: <+execution.steps.Fetch_Latest_Delegate_Tag.output.outputVariables.SELECTED_TAG>
                    remoteCacheRepo: konrness/harness-build-layer-cache
                    resources:
                      limits:
                        memory: 3Gi
                        cpu: "1"
  variables:
    - name: docker_username
      type: String
      description: ""
      value: konrness
    - name: docker_password
      type: Secret
      description: ""
      value: konrness_DockerHub
    - name: image_suffix
      type: String
      description: ""
      value: <+input>.allowedValues(gcloud,terraform)
    - name: account_id
      type: String
      description: ""
      value: <+account.identifier>
    - name: harness_api_key
      type: Secret
      description: ""
      value: konrharnesspat
    - name: override_image_tag
      type: String
      description: ""
      value: <+input>
  notificationRules:
    - name: New Delegate Version Notification
      identifier: New_Delegate_Version_Notification
      pipelineEvents:
        - type: PipelineStart
      notificationMethod:
        type: Email
        spec:
          userGroups: []
          recipients:
            - konr.ness@harness.io
      enabled: true
